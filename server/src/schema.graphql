type Project {
    id: ID!
    title: String!
    content: String!
    link: String
    repo: String
    for: String
    skillsRequired: [String!]!
    collaborators: [String!]!
    lastUpdatedBy: ID
    isArchived: Boolean!
    comments: [ID!]!
    accessList: [ID!]!
    createdAt: String!
    updatedAt: String!
    isFeatured: Boolean!
}

fragment ProjectDetails on Project {
    id
    title
    content
    link
    repo
    for
    skillsRequired
    collaborators
    lastUpdatedBy
    isArchived
    comments
    accessList
    createdAt
    updatedAt
    isFeatured
}

type Comment {
    id: ID!
    project: ID!
    author: ID!
    content: String!
    createdAt: String!
    parentComment: ID
    isDeleted: Boolean!
}

input ProjectInput {
    title: String!
    content: String!
    link: String
    repo: String
    for: String
    collaborators: [String!]
    skillsRequired: [String!]
}

input ProjectUpdateInput {
    title: String
    content: String
    link: String
    repo: String
    collaborators: [String!]
    isArchived: Boolean
    skillsRequired: [String!]
    isFeatured: Boolean
}

input ProjectFilter {
    skillsRequired: [String!]
    isArchived: Boolean
    isFeatured: Boolean
    for: String
    collaborators: [String!]
    title: String
}

input CollaboratorInput {
    projectId: ID!
    email: String!
}

type Query {
    project(id: ID!): Project
    projects(filterBy: ProjectFilter): [Project!]!
    myProjects: [Project!]!
}

type Mutation {
    # Project CRUD
    createProject(payload: ProjectInput!): Project!
    updateProject(id: ID!, payload: ProjectUpdateInput!): Project!
    deleteProject(id: ID!): Boolean!
    archiveProject(id: ID!): Project!

    # Collaborators
    addCollaborator(input: CollaboratorInput!): Project!
    removeCollaborator(input: CollaboratorInput!): Project!
    # Comments
    addComment(projectId: ID!, content: String!): Comment!
    deleteComment(id: ID!): Boolean!
}

type Subscription {
    projectUpdated(projectId: ID!): Project!
    commentAdded(projectId: ID!): Comment!
}